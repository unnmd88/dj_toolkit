import functools
import pprint

from sqlparse.engine.grouping import group_period

green = '3'
red = '1'
not_in_xp = '0'
max_groups = 61

def get_stages(cmdSG:list[str], start_logical_stage: int):
    res = {}

    for num, groups_in_stage in enumerate(cmdSG, start_logical_stage):
        _groups_in_stage = groups_in_stage.split(',')
        res[str(num)] = ','.join([str(i) for i, g in enumerate(_groups_in_stage, 1) if g == green])
    return res


XP1_STAGES = [
    ('3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,1,0,0,0,0,0,3,3,0,1,0,3,3,0,0,0,0,0,0,1,0,1,1,3,0,0,3,1,1,1,1,1,1,1,1,1,1,1'),
    ('3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,3,1,0,1,0,3,3,0,0,0,0,0,0,1,0,1,3,1,0,0,1,3,1,1,1,1,1,1,1,1,1,1'),
    ('3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,1,0,0,0,0,0,3,3,0,1,0,3,3,0,0,0,0,0,0,1,0,1,1,3,0,0,1,1,3,1,1,1,1,1,1,1,1,1'),
    ('3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,3,1,0,1,0,3,3,0,0,0,0,0,0,1,0,1,3,1,0,0,1,1,1,3,1,1,1,1,1,1,1,1'),
    ('3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,1,0,0,0,0,0,3,3,0,1,0,3,3,0,0,0,0,0,0,1,0,1,1,3,0,0,1,1,1,1,3,1,1,1,1,1,1,1'),
    ('1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,1,0,0,0,0,0,1,1,0,3,0,1,1,0,0,0,0,0,0,3,0,3,3,1,0,0,1,1,1,1,1,3,1,1,1,1,1,1'),
    ('1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,3,0,0,0,0,0,1,1,0,3,0,1,1,0,0,0,0,0,0,3,0,1,3,1,0,0,1,1,1,1,1,1,3,1,1,1,1,1'),
    ('3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,1,0,0,0,0,0,3,3,0,1,0,3,3,0,0,0,0,0,0,1,0,1,1,3,0,0,1,1,1,1,1,1,1,3,1,1,1,1'),
    ('1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,1,0,0,0,0,0,3,1,0,1,0,3,1,0,0,0,0,0,0,1,0,1,1,3,0,0,1,1,1,1,1,1,1,1,3,1,1,1'),
    ('3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,3,1,0,1,0,3,3,0,0,0,0,0,0,1,0,1,3,1,0,0,1,1,1,1,1,1,1,1,1,3,1,1'),
    ('3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,3,0,0,0,0,0,1,1,0,1,0,3,1,0,0,0,0,0,0,3,0,1,3,1,0,0,1,1,1,1,1,1,1,1,1,1,3,1'),
    ('1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,3,0,0,0,0,0,1,1,0,3,0,1,1,0,0,0,0,0,0,3,0,1,3,1,0,0,1,1,1,1,1,1,1,1,1,1,1,3')
]
XP2_STAGES = [
    ('0,1,0,0,0,0,0,0,0,0,0,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'),
    ('0,3,0,0,0,0,0,0,0,0,0,3,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'),
    ('0,1,0,0,0,0,0,0,0,0,0,1,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'),
    ('0,3,0,0,0,0,0,0,0,0,0,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'),
    ('0,3,0,0,0,0,0,0,0,0,0,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'),


]


def get_groups_in_xp(data: dict):

    print({gg for gg in data.values()})
    print(data.values())
    print(list(data.values()))

    a_set = set()
    for g in data.values():
        print(g.split(','))
        a_set |= set(g.split(','))
    print(a_set)
    print(list(map(str, sorted(map(int, a_set)))))
    return a_set


def get_val_for_cmdSG(groups_in_xp: set, groups_in_curr_stage: str):
    g_split = set(groups_in_curr_stage.split(','))

    print(f'groups_in_xp: {groups_in_xp}')
    line = ''
    for num_g in range(1, max_groups + 1):
        num_g_str = str(num_g)
        if not num_g_str in groups_in_xp:
            val = not_in_xp
        elif num_g_str in g_split:
            val = green
        else:
            val = red
        line += val
    return line


def write(data: dict, xp):

    with open('413_stages.txt', 'w') as f:
        f.write(f'xp {xp}\n')

        g_xp = get_groups_in_xp(data)
        for num_stage, groups in data.items():
            cmdSG = get_val_for_cmdSG(g_xp, groups)
            f.write(f'stage {num_stage}: \n{groups}\n{cmdSG}\n{"-" * 40}\n')
        f.write(f'\n')


xp1_result = get_stages(XP1_STAGES, 1)
# print(*xp1_result.items(), sep='\n')


write(xp1_result, '1')